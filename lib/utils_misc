#!/usr/bin/bash

<<'__USAGE__'

    To include:
        . $COSA/lib/utils misc

__USAGE__


<<'__EX__'

    ask_confirm "Do you want to print a success message?"
    if is_confirmed; then
        e_ok "Here is a success message"
    else
        e_err "You did not ask for a success message"
    fi

__EX__

# Get yes/no response
ask_confirm () {
    echo -en "\n${AES[yel]}$*${AES[rst]}"
    read -p " (y/N) "
    echo
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed () { [[ $REPLY =~ ^[Yy] ]]; }

# ---

<<'__EX__'

    declare -A assoc=([$'x\ty z']='foo bar baz'
                      [$'a b\tc']='1 2 3'
                      [$'i j k']='-1 -1 -1')

    IFS=$'\n'   # Needed if items have spaces and/or tabs
                # Can't handle keys/items containing newlines
    for key in $(sorted "${!assoc[@]}"); do
        echo "assoc['$key']='${assoc[$key]}'"
    done
    IFS=$' \t\n'

__EX__

sorted () {
    printf '%s\n' "$@" | sort
}

# ---

part () {
    local p_cmd=$1 p_delim=$2 p_item=$3
    if [[ -n $4 ]]; then
        local -n p_var=$4
    else
        local p_var
    fi

    # Usage
    local p_usage="Usage:
    part +1 'delim' "string" [varname]  # first part
    part +$ 'delim' "string" [varname]  # last part
    part -1 'delim' "string" [varname]  # first part removed
    part -$ 'delim' "string" [varname]  # last part removed"

    if [[ -z $1 || -z $2 || -z $3 ]]; then
        e_err 'Missing arg(s)' >&2; e_info "$p_usage" >&2
        return 1
    fi

    case $p_cmd in
        +1) p_var=${p_item%%${p_delim}*} ;;
        +$) p_var=${p_item##*${p_delim}} ;;
        -1) p_var=${p_item#*${p_delim}}  ;;
        -$) p_var=${p_item%${p_delim}*}  ;;
        *) e_err 'Missing arg(s)' >&2 ; e_info "$p_usage" >&2
            return 1
            ;;
    esac

    if [[ -z $4 ]]; then
        echo "$p_var"
    fi
    return 0
}

# ---

copy_hash () {
    local -n ch_fm=$1 ch_to=$2
    ch_to=()
    local ch_idx
    for ch_idx in "${!ch_fm[@]}"; do
        ch_to[$ch_idx]=${ch_fm[$ch_idx]}
    done
}

<<'__UNUSED__'
clear_hash () {
    local -n _ch_h=$1
    local _ch_x
    for _ch_x in "${!_ch_h[@]}"; do
        unset "_ch_h[$_ch_x]"
    done
}
__UNUSED__

# ---

# Make ANSI escape sequences
make_es () {
    local -A es_es=(
        [0]='0'  # zero = reset

        [b]='1'
        [i]='3'
        [u]='4'
        [n]='7'  # n(egative) = inverse

        [r]='31'
        [g]='32'
        #[y]='33'
        [y]='38;5;228'
        #[b]='34'
        [bl]='38;5;033'
        [m]='35'
        [c]='36'
        [o]='38;5;202' # orange
    )

    local es_ii es_seq
    for es_ii in "$@"; do
        if [[ -z ${es_es[$es_ii]} ]]; then
            es_seq+="$es_ii;"
        else
            es_seq+="${es_es[$es_ii]};"
        fi
    done
    echo -n "[${es_seq:0:-1}m"
}

# EOF
