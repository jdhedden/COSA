#!/bin/bash

<<'__USAGE__'

    To include:
        . $COSA/lib/utils tree

    Supports recursive addition/deletion of nodes

    Node names may not contain spaces, periods or pipe characters.  Leaf
    values must not start with a pipe character.

    You may omit the leading '_.' on node paths when passed as arguments to
    'tree_' functions.  The use of underscore ('_') as a node name at the top
    level (i.e., '_._') is discouraged.  If used, then you must pass full node
    paths as arguments to 'tree_' functions.

    Other keys/data may be added to the tree structure, but such practices
    are discouraged.

    ### EXAMPLES ###

    declare -A TREE
    tree_init TREE

    node_add TREE bork.cat
    node_set TREE water.fish 123

    node_set foo.1 bar
    node_set foo.2 baz

    declare -a subnodes
    node_get TREE foo subnodes
    for subnode in ${subnodes[@]}; do
        echo "$(node_get TREE $subnode)"
            - or -
        echo "${TREE[$subnode]}"
    done

    node_del TREE foo

    if node_is_leaf TREE bar; then
        echo "$(node_get TREE bar)"
            - or -
        echo "${TREE[_.bar]}"       # NOTE: full node path must be used
    fi

    tree_copy TREE1 TREE2

    tree_dump TREE

__USAGE__


tree_init() {
    eval "local -n ti_t=$1"
    ti_t=([_]='')
}


__path() {
    eval "local -n __n=$1"

    if [[ -z $__n ]]; then
        __n='_'      # root
    elif [[ $__n != '_' && ! $__n =~ ^_\. ]]; then
        __n="_.$__n"  # add root prefix
    fi
}


node_exists() {
    local _n=$2; __path _n  # node
    [[ -v "$1[$_n]" ]]
}


node_is_null() {
    eval "local -n ix_t=$1"   # tree
    local _n=$2; __path _n  # node
    if [[ ! -v "$1[$_n]" ]]; then
        e_warn "Node '$_n' does not exist in '$1'" >&2
        return 1
    fi

    [[ -z ${ix_t[$_n]} ]]
}


node_is_node() {
    eval "local -n in_t=$1"   # tree
    local _n=$2; __path _n  # node
    if [[ ! -v "$1[$_n]" ]]; then
        e_warn "Node '$_n' does not exist in '$1'" >&2
        return 1
    fi

    [[ ${in_t[$_n]} =~ ^\| ]]
}


node_is_leaf() {
    eval "local -n il_t=$1"   # tree
    local _n=$2; __path _n  # node
    if [[ ! -v "$1[$_n]" ]]; then
        e_warn "Node '$_n' does not exist in '$1'" >&2
        return 1
    fi

    [[ -n ${il_t[$_n]} && ! ${il_t[$_n]} =~ ^\| ]]
}


node_add() {
    # Usage:  node_add tree node subnode
    #    or:  node_add tree node.subnode

    local quiet=false
    if [[ $1 == -q ]]; then
        shift
        quiet=true
    fi

    eval "local -n na_t=$1"   # tree
    local _n=$2; __path _n  # node
    local _s=$3             # subnode  (XXX - screen for '|' chars)
    if [[ -z $_s ]]; then   # Alternate (2nd) usage
        if [[ $_n == _ ]]; then
            e_err "Cannot add '_' as node"
            return 1
        fi
        _s=${_n##*.}
        _n=${_n%.*}
    fi

    if [[ $_n != _ ]]; then
        if [[ -v "$1[$_n.$_s]" ]]; then
            if ! $quiet; then
                e_warn "Node '$_n.$_s' already exists in '$1'" >&2
            fi
            return 1
        fi

        # Recursive addition
        if [[ ! -v "$1[$_n]" ]]; then
            if $quiet; then
                node_add -q $1 "${_n%.*}" "${_n##*.}"
            else
                node_add $1 "${_n%.*}" "${_n##*.}"
            fi
        fi
    fi

    # Add subnode and initialize
    na_t[$_n]+="|$_s"
    na_t[$_n.$_s]=
    return 0
}


node_get() {
    local quiet=false
    if [[ $1 == -q ]]; then
        shift
        quiet=true
    fi

    eval "local -n ng_t=$1"   # tree
    local _n=$2; __path _n  # node
    local by_ref=false
    if [[ -n $3 ]]; then
        eval "local -n ng_v=$3"
        by_ref=true
    fi


    if [[ ! -v "$1[$_n]" ]]; then
        if ! $quiet; then
            e_warn "Node '$_n' does not exist in '$1'" >&2
        fi
        if $by_ref; then
            ng_v=''
        fi
        return 1
    fi

    if node_is_null $1 "$_n"; then
        if ! $quiet; then
            e_warn "Node '$_n' is null" >&2
        fi
        if $by_ref; then
            ng_v=''
        fi
        return 1
    elif node_is_node $1 "$_n"; then
        # Return subnodes
        if $by_ref; then
            ng_v=(${ng_t[$_n]//|/ $_n.})
        else
            echo -n "${ng_t[$_n]//|/ $_n.}"
        fi
    else
        # Return value
        if $by_ref; then
            ng_v=${ng_t[$_n]}
        else
            echo -n "${ng_t[$_n]}"
        fi
    fi
    return 0
}


node_set() {
    eval "local -n ns_t=$1"   # tree
    local _n=$2; __path _n  # node

    # Recursively add nodes if needed
    if [[ ! -v "$1[$_n]" ]]; then
        node_add $1 "$_n"

    elif ! node_is_leaf $1 "$_n"; then
        e_warn "Cannot set value: $1[$_n] is a node" >&2
        return 1
    fi

    ns_t[$_n]=$3  # Set value
    return 0
}


node_del() {
    local quiet=false
    if [[ $1 == -q ]]; then
        shift
        quiet=true
    fi

    eval "local -n nd_t=$1"   # tree
    local _n=$2; __path _n  # node
    if [[ ! -v "$1[$_n]" ]]; then
        if ! $quiet; then
            e_warn "Node '$_n' does not exist in '$1'" >&2
        fi
        return 1
    fi

    # Recursive deletion
    if node_is_node $1 "$_n"; then
        local _s
        if $quiet; then
            for _s in $(node_get -q $1 "$_n"); do
                node_del -q $1 "$_s"
            done
        else
            for _s in $(node_get $1 "$_n"); do
                node_del $1 "$_s"
            done
        fi
    fi

    # Delete node and its reference in parent
    unset nd_t[$_n]
    _s=${_n##*.}
    _n=${_n%.*}
    if [[ ${nd_t[${_n}]} =~ \|$_s$ ]]; then
        nd_t[${_n}]=${nd_t[${_n}]%|*}
    else
        nd_t[${_n}]=${nd_t[${_n}]/|$_s|/|}
    fi
    return 0
}


tree_copy() {
    eval "local -n tc_t1=$1"
    eval "local -n tc_t2=$2"
    tc_t2=()
    local tc_k
    for tc_ii in "${!tc_t1[@]}"; do
        tc_t2[$tc_ii]=${tc_t1[$tc_ii]}
    done
}


tree_dump() {
    eval "local -n td_t=$1"

    echo "declare -A $1=("
    local td_k
    for td_k in $(sorted "${!td_t[@]}"); do
        echo "[$td_k]=\"${td_t[$td_k]}\""
    done
    echo ')'
}

# EOF
